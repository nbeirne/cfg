#
## SolitaryCipher's TMUX Config
#

unbind-key C-b
set-option -g prefix C-Space
bind-key Space send-prefix
bind q detach-client
set -sg escape-time 0

# reload file
bind r source-file ~/.tmux.conf
# 0 is too far from ` ;)
set -g base-index 1
set -g pane-base-index 1

# Add truecolor support
set-option -ga terminal-overrides ',xterm-256color:Tc'
# Default terminal is 256 colors
set -g default-terminal "xterm-256color"

#set -g default-terminal "screen-256color"
set-environment -g CHERE_INVOKING 1

set -g status-keys vi
set -g history-limit 10000

setw -g mode-keys vi
setw -g monitor-activity on

setw -g mouse on


# fix home/end
bind -n End send-key C-e
bind -n Home send-key C-a

# window/session open and closing
bind n new-window
bind N command-prompt -p "(new session)" "new-session -s %%"

bind d confirm-before -p "kill pane #P? (y/n)" kill-pane  
bind D confirm-before -p "kill window #W? (y/n)" kill-window
bind Q confirm-before -p "kill session #S? (y/n)" kill-session

# split with vim-like keys
bind v  split -h -c '#{pane_current_path}'
bind s  split -v -c '#{pane_current_path}'
bind \\ split -h -c '#{pane_current_path}'
bind -  split -v -c '#{pane_current_path}'

# maximize current pane
bind = resize-pane -Z
bind | resize-pane -Z

# Vim style pane selection
bind h select-pane -L
bind j select-pane -D 
bind k select-pane -U
bind l select-pane -R

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n C-h  if-shell  "$is_vim"  "send-keys C-h"  "select-pane -L"
bind-key -n C-j  if-shell  "$is_vim"  "send-keys C-j"  "select-pane -D"
bind-key -n C-k  if-shell  "$is_vim"  "send-keys C-k"  "select-pane -U"
bind-key -n C-l  if-shell  "$is_vim"  "send-keys C-l"  "select-pane -R"
bind-key -n C-\  if-shell  "$is_vim"  "send-keys C-\\" "select-pane -l"

# resize panes using PREFIX {H,J,K,L} and PREFIX PREFIX+{H,J,K,L}
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

bind M-h resize-pane -L 5
bind M-j resize-pane -D 5
bind M-k resize-pane -U 5
bind M-l resize-pane -R 5

# C-S-* does not work 
#bind C-J resize-pane -D 5
#bind C-K resize-pane -U 5
#bind C-H resize-pane -L 5
#bind C-L resize-pane -R 5

# window switching
bind [ previous-window
bind ] next-window 
bind -n S-Left  previous-window
bind -n S-Right next-window
bind tab last-window

# choosing things
bind w choose-window
bind T choose-tree
bind W choose-session
bind s choose-session
bind p choose-buffer

# move / rename windows and sessions
bind . command-prompt -p "(go to window)" "select-window -t %%"

bind \; command-prompt -p "(move window)" "move-window -t %%"

bind "'" command-prompt -p "(rename window)" "rename-window %%"
bind '"' command-prompt -p "(rename session)" "rename-session %%"

# unbinding keys
unbind-key ,
unbind-key z

# clipboard + visual mode
set -g set-clipboard off
unbind -T copy-mode-vi Enter
bind -T copy-mode-vi 'v' send-keys -X begin-selection
bind C-v copy-mode
#if-shell 'test "$(uname)" = "Linux"'  'bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel -i -p -b"'
if-shell 'test "$(uname)" = "Darwin"' 'bind -T copy-mode-vi y send-keys -X copy-pipe "reattach-to-user-namespace pbcopy"'

# disable "release mouse drag to copy and exit copy-mode", ref: https://github.com/tmux/tmux/issues/140
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# since MouseDragEnd1Pane neither exit copy-mode nor clear selection now,
# let single click do selection clearing for us.
bind-key -T copy-mode-vi MouseDown1Pane select-pane\; send-keys -X clear-selection

# this line changes the default binding of MouseDrag1Pane, the only difference
# is that we use `copy-mode -eM` instead of `copy-mode -M`, so that WheelDownPane
# can trigger copy-mode to exit when copy-mode is entered by MouseDrag1Pane
#bind -n MouseDrag1Pane if -Ft= '#{mouse_any_flag}' 'if -Ft= \"#{pane_in_mode}\" \"copy-mode -eM\" \"send-keys -M\"' 'copy-mode -eM'



# disable auto window renaming 
set-option -g allow-rename off

# colors 

# window titles
setw -g set-titles on
setw -g set-titles-string '#S / #W / #T'


# deep-challenger theme

# left side of status bar (not windows)
set -g status-justify left
set -g status-style  fg=colour15,bg=default
set -g status-left-style fg=colour15,bg=default
set -g status-left "#[fg=colour6,bg=colour8,nobold]  [#S]  #[fg=colour15,bg=default,bold]"
set -g status-left-length 50

# window status format and colors
setw -g window-status-format ' #I:#W '
setw -g window-status-current-format '#[fg=colour0,bg=colour6,nobold] #I:#W '
setw -g window-status-separator ''

set -g window-status-style fg=colour6,bg=colour8
set -g window-status-current-style fg=colour0,bg=colour6
set -g window-status-activity-style fg=colour6,bg=colour8,italics
set -g window-status-bell-style fg=colour8,bg=red

# right side
set -g status-right-style fg=colour15,bg=default
set -g status-right "##[fg=colour6,bg=colour8]  #H  ##[fg=colour0,bg=colour6]  %d-%m-%y  %R  "
set -g status-right-length 150

# panes
set -g pane-border-style fg=colour8,bg=default
set -g pane-active-border-style fg=colour6,bg=default
set -g display-panes-colour default
set -g display-panes-active-colour colour6

# various messages
set -g message-style fg=colour0,bg=colour6
set -g message-command-style fg=colour0,bg=colour6
set -g mode-style fg=colour0,bg=colour6


